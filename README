# Fraud Detection Model

![Feature Importance](Screenshot_2025-08-03_150529.png)

---

## **1. Overview**
This project predicts fraudulent financial transactions using **Machine Learning**.  
The model was built on a dataset of **6.3 million transactions** and uses techniques like **SMOTE** to handle class imbalance and **Random Forest** to achieve high accuracy.

---

## **2. Business Problem**
Fraudulent transactions can cause significant losses to financial institutions.  
**Goal:**  
- Detect fraudulent transactions in real time.  
- Reduce false positives while maintaining high recall.  
- Provide actionable insights to strengthen fraud prevention.

---

## **3. Dataset**
- **Size:** 6,362,620 transactions  
- **Features:** Transaction type, amount, balances before/after transaction, fraud flags  
- **Target:** `isFraud` (1 = Fraud, 0 = Legitimate)

---

## **4. Approach**
1. **Data Cleaning**: Removed duplicates, dropped irrelevant IDs (`nameOrig`, `nameDest`).  
2. **Class Balancing**: Applied **SMOTE** to address extreme imbalance (~0.13% fraud).  
3. **Modeling**:  
   - **Logistic Regression** as baseline.  
   - **Random Forest** as final model (better precision & recall).  
4. **Evaluation**: Confusion Matrix, Classification Report, ROC-AUC.  
5. **Feature Importance**: Identified top predictors using Random Forest.

---

## **5. Results**
### **Logistic Regression**
- ROC-AUC: 0.986  
- High recall but poor precision (too many false alerts).

### **Random Forest**
- ROC-AUC: 0.999  
- Precision (Fraud): 67%  
- Recall (Fraud): 94%  
- Accuracy: ~99.94%

---

## **6. Key Insights**
- Fraudulent transactions are mostly **CASH_OUT** and **TRANSFER**.  
- High-value transactions and sudden balance drops are strong indicators of fraud.  
- Feature Importance visualization (above) shows **oldbalanceOrg**, **newbalanceOrig**, and **amount** as top predictors.

---

## **7. How to Run**
1. Clone this repository:
   ```bash
   git clone https://github.com/YourUsername/Fraud-Detection-Model.git
